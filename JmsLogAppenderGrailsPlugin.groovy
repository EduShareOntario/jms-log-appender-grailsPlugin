import log.DelegatingAppender
import log.JmsLogAppenderService
import org.apache.activemq.ActiveMQConnectionFactory
import org.apache.log4j.EnhancedPatternLayout
import org.apache.log4j.Level
import org.apache.log4j.Logger
import org.apache.log4j.RollingFileAppender
import org.springframework.jms.connection.CachingConnectionFactory

class JmsLogAppenderGrailsPlugin {
    // the plugin version
    def version = "0.1"
    // the version or versions of Grails the plugin is designed for
    def grailsVersion = "2.4.4 > *"
    // resources that are excluded from plugin packaging
    def pluginExcludes = [
        "grails-app/views/error.gsp"
    ]

    def title = "Jms Log Appender Plugin" // Headline display name of the plugin
    def author = "Todd Hiles"
    def authorEmail = "2toddhiles@gmail.com"
    def description = '''\
Adds a JMS log appender to the 'grails.app' logger.  The JMS log appender as it's name implies appends the loggingEvents to a JMS queue.
'''

    // URL to the plugin's documentation
    def documentation = "http://grails.org/plugin/jms-log-appender"

    // Extra (optional) plugin metadata

    // License: one of 'APACHE', 'GPL2', 'GPL3'
//    def license = "APACHE"

    // Details of company behind the plugin (if there is one)
//    def organization = [ name: "My Company", url: "http://www.my-company.com/" ]

    // Any additional developers beyond the author specified above.
//    def developers = [ [ name: "Joe Bloggs", email: "joe@bloggs.net" ]]

    // Location of the plugin's issue tracker.
//    def issueManagement = [ system: "JIRA", url: "http://jira.grails.org/browse/GPMYPLUGIN" ]

    // Online location of the plugin's browseable source code.
//    def scm = [ url: "http://svn.codehaus.org/grails-plugins/" ]

    def doWithWebDescriptor = { xml ->
        // TODO Implement additions to web.xml (optional), this event occurs before
    }

    static logLayout = new EnhancedPatternLayout(conversionPattern: "%d{yyyy-MM-dd HH:mm:ss,SSS} [%thread] %-5level %logger: %message%n%throwable{short}")
    def doWithSpring = {
        // Implement runtime spring config (optional)

        jmsConnectionFactory(CachingConnectionFactory) {
            targetConnectionFactory = { ActiveMQConnectionFactory cf ->
                brokerURL = application?.mergedConfig?.jmsLogAppender?.brokerURL ?: 'tcp://localhost:61716'
            }
            sessionCacheSize = 10
        }

        fileAppender(RollingFileAppender) {bean ->
            name ='rollingFileAppender'
            maxFileSize = 10 * 1024 * 1024 /*10MB*/
            layout = logLayout
            threshold = Level.TRACE
            maxBackupIndex = 20
        }
    }

    def doWithDynamicMethods = { ctx ->
        // TODO Implement registering dynamic methods to classes (optional)
    }

    def doWithApplicationContext = { ctx ->
        // Don't add the delegatingAppender to the root logger, otherwise recursive log calls will be generated by the appender itself!
        def jmsLogAppenderService = ctx.getBean(JmsLogAppenderService)
        def delegatingAppender = new DelegatingAppender(name: 'delegatingAppender', threshold: Level.TRACE, delegate: jmsLogAppenderService)
        ['grails.app'].each { Logger.getLogger(it).addAppender(delegatingAppender) }

        // Use the fileAppender as a default appender
        def fileAppender = ctx.getBean("fileAppender")
        if (fileAppender) {
            fileAppender.setFile(application?.mergedConfig?.jmsLogAppender?.fileAppender?.filename ?: "app.log", true, true, 1024)
            Logger.rootLogger.addAppender(fileAppender)
        }

        // Ensure jmsLogAppender doesn't cause recursive calls/stack overflow.
        def jmsLogAppenderServiceLoggers = ['grails.app.services.grails.plugin.jms'].collect { Logger.getLogger(it) }
        jmsLogAppenderServiceLoggers.each {
            // don't use ancestor loggers or their associated appenders.
            it.additivity = false
            // but make sure the jmsLogAppender's log events are logged!
            if (fileAppender) {
                it.addAppender(fileAppender)
            }
        }
    }

    def onChange = { event ->
        // TODO Implement code that is executed when any artefact that this plugin is
        // watching is modified and reloaded. The event contains: event.source,
        // event.application, event.manager, event.ctx, and event.plugin.
    }

    def onConfigChange = { event ->
        // TODO Implement code that is executed when the project configuration changes.
        // The event is the same as for 'onChange'.
    }

    def onShutdown = { event ->
        // TODO Implement code that is executed when the application shuts down (optional)
    }
}
